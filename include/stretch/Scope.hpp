#ifndef SCOPE_HPP
#define SCOPE_HPP

/////////////////////////////////////////////////
/// Headers
/////////////////////////////////////////////////
#include <map>

#include <tao/pegtl/contrib/parse_tree.hpp>

#include "stretch/Variable.hpp"
#include "stretch/Exceptions.hpp"

/////////////////////////////////////////////////
namespace stretch {

/////////////////////////////////////////////////
class Fonction;

/////////////////////////////////////////////////
/// @brief Scope d'un bloc
/////////////////////////////////////////////////
class Scope {
public:
    /////////////////////////////////////////////////
    Scope(Scope* scope = nullptr);

    /////////////////////////////////////////////////
    Scope* get_parent() const;

    /////////////////////////////////////////////////
    void assigner(const std::string& nom, Variable valeur);

    /////////////////////////////////////////////////
    void assigner(std::unique_ptr<pe::Noeud>& variable, Variable valeur);

    /////////////////////////////////////////////////
    Variable lire(const std::string& nom);

private:
    /////////////////////////////////////////////////
    Scope* m_parent;                                ///< Scope parente
    std::map<std::string, Variable> m_variables;    ///< Variables locales
};

} // namespace stretch

#endif // SCOPE_HPP